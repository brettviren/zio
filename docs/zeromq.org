#+title: ZIO ZeroMQ notes
#+setupfile: setup.org
#+include: nav.org

This document holds some special notes on the underlying ZeroMQ ecosystem

* cppzmq errors

The core ~zmq::socket_t::recv()~ and ~send()~ calls follow an error
handling protocol which consists of possibly thrown ~zmq::error_t~
exception or a null return value which may not be discarded.  The
return value is a ~std::optional~ which will hold a size value if
successful and will be null if low-level ~libzmq~ call raises ~EAGAIN~
(ie, a signal interrupted the call).  All other low-level errors cause
~zmq::error_t~ to be raised.

ZIO's ~zio/util.hpp~ provides high level, type-erased versions of ~send()~
and ~recv()~.  They provide default flags of ~none~ and so the 

These pass-through cppzmq's ~send_result_t~ or
~recv_result_t~ which will be empty if a timeout was allowed to occur.
As the ~send_flags~ or ~recv_flags~ value of ~noflags~ is default, this
return value is no marked with C++17 ~nodiscard~.  If caller requests
~nowait~ or otherwise set the socket option it is up to caller to check
the return.  Note, unrelated to cppzmq error handling, the most
generic of these high-level functions will throw ~std::runtime_error~ if
given an unsupported socket type.

* ROUTER/DEALER Multipart Messages

Of particular confusion is how ROUTER and DEALER deal with "address
envelope stacks".  These are identifiers prefixed, in-band to the
multipart message.  The synchronous REP/REQ sockets also and or remove
an initial null message.  Both of these manipulations done inside the
ZeroMQ socket code may be exposed to user code depending on which
socket types are employed.

The following table summarizes what each socket does internally inside
their ~send()~ or ~recv()~ method.  See the ~zmq_socket(3)~ man page and
Zguide for details.  In the table an "addr" is a single frame holding
an (opaque) identifier and "null" is an empty delimiter frame.  In the
headline row, a "(s)" indicates the socket is of a "serverish" type
and "(c)" indicates a "clientish" type.

|--------+------------+-----------+------------+------------|
| inside | ROUTER(s)  | DEALER(c) | REP(s)     | REQ(c)     |
|--------+------------+-----------+------------+------------|
| ~send()~ | pop(addr)  |           | push(null) | push(null) |
|--------+------------+-----------+------------+------------|
| ~recv()~ | push(addr) |           | pop(null)  | pop(null)  |
|--------+------------+-----------+------------+------------|

 To understand any message path through two endpoint sockets start with
the ~send()~ row and mentally apply the operation for the given sending
socket.  Then move to the ~recv()~ row and apply the operation in the
given receiving socket.

For example, a REQ->ROUTER exchange starts with a "push(null)" in the
REQ's ~send()~ , the message is then transferred, and ends with a
"push(addr)" performed inside the ROUTER's ~recv()~.  The resulting
message delivered to the ROUTER appication has at least 2 parts in
addition to any payload parts:

|---------|
| addr    |
|---------|
| null    |
|---------|
| payload |
|---------|

When the ROUTER application wishes to return a message to the client,
it must assure the "addr" and "null" frames are kept intact.  And,
depending on any intervening proxies, themselves composed of ROUTER,
there may be multiple "addr" (thus address envelope *stack*).

Of important note is that an application using DEALER must explicitly
manipulate the multipart message in order to correctly talk to ROUTER
or REP.  A DEALER application will receive a message from REP or
ROUTER that starts with a "null" frame and likewise it must add a null
frame when sending to either.
