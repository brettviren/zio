#+title: ZIO - C++ interface to ZeroMQ and Zyre.
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="org.css"/>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="org1.css" />
#+options: toc:nil html-postamble:nil

#+include: nav.org

ZIO provides a high-level interface to ZeroMQ, Zyre and implements
some patterns described in the [[http://zguide.zeromq.org/][zguide]].  It also provides a /ported
graph/ model for constructing a network topology.  Some of the features
ZIO provides include:

- A "logger object" type interface to emitting messages supporting
  both free form text strings as well as structured data metrics ([[file:outbox.org][outbox]]).

- A high level, but still general message format ([[file:messages.org][messages]] and [[file:format.org][format]])

- An interface to Zyre peer discovery, persistence and reaction ([[file:peer.org][peer]])

- A "ported graph" abstraction which provides network topology
  self-assembly and which may be used to develop distributed
  applications that follow the /data flow programming/ paradigm ([[file:node.org][node]]
  and [[file:port.org][port]]).

- A [[file:api.org][C++ API]] (also see [[file:doxy/html/][doxygen]]) and matching [[file:python.org][Python package]]

- A Python [[file:flow-broker.org][flow broker]] bringing together flow clients and flow
  handlers in a pluggable manner.

- A Python [[file:task-broker.org][task broker]] implementing a modified version of ZeroMQ's
  [[https://github.com/zeromq/majordomo][majordomo]] broker (WIP).

There's also some half-backed / in-progress ideas.

- An RPC'ish pattern [[file:roam.org][roam]].

See the navigation links for other ways to enter the documentation.

Known applications of ZIO include:

- [[https://github.com/wirecell/wire-cell-toolkit][The `zio` subpackage]] in WCT.
