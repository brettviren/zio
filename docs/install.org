#+title: ZIO Installation
#+setupfile: setup.org
#+include: nav.org

* Install ZIO

ZIO installs in the usual [[https://waf.io][Waf]] way.

#+begin_example
  $ ./waf configure --prefix=/path/to/install
  $ ./waf install
#+end_example

To build, these software dependencies will be located via [[https://www.freedesktop.org/wiki/Software/pkg-config/][pkg-config]].

- [[https://github.com/zeromq/zyre][Zyre]] which needs:
- [[https://github.com/zeromq/czmq][CZMQ]] which needs:
- [[https://github.com/zeromq/libzmq][libzmq]] (ZIO needs this built with "draft" sockets)
- [[https://github.com/gabime/spdlog#install][spdlog]]

In addition, ZIO uses [[https://github.com/zeromq/cppzmq][cppzmq]] and [[https://github.com/nlohmann/json][nlohmann/json]] and directly includes
copies of these header-only packages.

See also [[Installation Details]] for info on installing the software dependencies.

* Tests

The default install target will compile and execute units tests.  To
avoid running these tests you may add ~--notests~ as:

#+begin_example
  $ ./waf install --notests
#+end_example

Or, to force their running:

#+begin_export 
  $ ./waf --alltests
#+end_export

* Documentation

The generated documentation committed to the repository.  With a
suitable environment (need Emacs and a recent [[https://plantuml.com/][plantuml]]) one can
rebuild it:

#+begin_example
  $ cd docs
  $ make
#+end_example

* Python 

ZIO also provides a Python package.  

** Install from source

The ZIO Python package installs in "the usual way" from source but its
dependencies need some particular care.  ZIO makes use of PyZMQ, the
Python bindings to *libzmq* and because ZIO requires ZeroMQ "draft"
sockets, PyZMQ needs to be installed manually in order to enable them
as well as point to an installation of *libzmq* which includes them.

#+begin_example
  $ python3 -m venv /path/to/venv
  $ source /path/to/venv/bin/activate
  $ cd zio/python
  $ pip install --pre pyzmq \
      --install-option=--enable-drafts \
      --install-option=--zmq=/path/to/zmq
  $ pip install -r requirements.txt
  $ pip install [-e] .
#+end_example

In the above, replace ~/path/to~ with paths suitable for your
environment.  Use ~-e~ option to do in-place development on the ~zio~
Python module.

The ~zio~ Python module has unit tests which can be run as:

#+begin_example
  $ cd zio/python/tests
  $ python -m unittest 
#+end_example

** Python Package Index

At some point ZIO may be placed in PyPI.  Currently there is an
unsurprising name conflict with "ZIO".  For now, just know that the
[[https://pypi.org/project/zio/][four year untouched package currently holding the name ZIO]] is totally
unrelated to this here project.

* Installation Details

** spdlog

For now, ZIO uses spdlog *after* (and not including) version 1.5.0 which
may mean installing from tip of its git ~master~ branch.  ZIO will
likely switch to the next explicit release post-1.5.0 when it is
available.

#+begin_example
$ git clone https://github.com/gabime/spdlog.git
$ mkdir spdlog/build && cd spdlog/build
$ cmake .. \
   -DCMAKE_INSTALL_PREFIX=$HOME/opt/spdlog \
   -DCMAKE_POSITION_INDEPENDENT_CODE=ON
$ make -j
$ make install
#+end_example

For ZIO to find ~spdlog~ be sure that you add its ~pkg-config~ directory
to the proper variable (along with others).  Eg:

#+begin_example
$ export PKG_CONFIG_PATH=$HOME/opt/spdlog/lib/pkgconfig:$HOME/opt/zmq/lib/pkgconfig
#+end_example

